name: Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. 1.2.3). Leave empty to use current package.json version.'
        required: false

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write  # for npm provenance

    env:
      NPM_SCOPE: '@unicorn.eth'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: ${{ env.NPM_SCOPE }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Sanity check pnpm version
        run: pnpm --version

      - name: Enable Corepack
        run: corepack enable

      - name: Sanity check pnpm version
        run: pnpm --version  # should show 10.17.1

      - name: Show pnpm & lockfile headers
        run: |
          pnpm --version
          head -n 5 pnpm-lock.yaml

      - name: Install deps (clean + shamefully-hoist)
        run: |
          rm -rf node_modules
          pnpm install --no-frozen-lockfile --shamefully-hoist

      - name: Derive VERSION & NOTES from Release
        if: github.event_name == 'release'
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

          # Use a unique delimiter that won't appear in release notes
          DELIMITER="EOF_$(date +%s)_$"
          NOTES_GH="${{ github.event.release.body }}"
          if [ -z "$NOTES_GH" ]; then
            # fallback to annotated tag message (empty for lightweight tags)
            NOTES_GH="$(git for-each-ref "refs/tags/$TAG" --format='%(contents)')"
          fi
          
          # Use the unique delimiter
          {
            echo "NOTES<<${DELIMITER}"
            echo "$NOTES_GH"
            echo "${DELIMITER}"
          } >> "$GITHUB_ENV"

      # If manually dispatched with an input version, respect it
      - name: Optional bump version (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          INPUT_VERSION="${{ inputs.version }}"
          
          if [ "$CURRENT_VERSION" != "$INPUT_VERSION" ]; then
            npm version "$INPUT_VERSION" --no-git-tag-version
            echo "VERSION=$INPUT_VERSION" >> "$GITHUB_ENV"
          else
            echo "Version is already $INPUT_VERSION, skipping bump"
            echo "VERSION=$INPUT_VERSION" >> "$GITHUB_ENV"
          fi

      # If VERSION is set from release/tag or dispatch, ensure package.json matches
      - name: Set package.json version from derived VERSION
        if: ${{ env.VERSION != '' }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ env.VERSION }}"
          
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
            npm version "$TARGET_VERSION" --no-git-tag-version
          else
            echo "Version is already $TARGET_VERSION, no update needed"
          fi

      - name: Verify TypeScript definitions exist
        run: |
          if [ ! -f "src/types/index.d.ts" ]; then
            echo "❌ Error: src/types/index.d.ts not found!"
            echo "This file should be manually created and committed to the repo."
            exit 1
          fi
          echo "✅ TypeScript definitions found at src/types/index.d.ts"

       - name: Debug - Check file exists
         run: |
          echo "=== Checking if unicornConnector.js exists ==="
          ls -la src/
          echo ""
          echo "=== Connectors directory ==="
          ls -la src/connectors/
          echo ""
          echo "=== First 10 lines of unicornConnector.js ==="
          head -10 src/connectors/unicornConnector.js
          echo ""
          echo "=== Checking index.js import ==="
          grep unicornConnector src/index.js
            
      - name: Build
        run:  pnpm run build

      - name: Verify build output
        run: |
          echo "📦 Checking build output..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist/ directory not found!"
            exit 1
          fi
          
          # Check for required files
          REQUIRED_FILES=("dist/index.js" "dist/index.mjs" "dist/index.d.ts")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: $file not found!"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
          echo ""
          echo "📊 Build output sizes:"
          ls -lh dist/
          
          echo ""
          echo "📝 TypeScript definitions preview:"
          head -n 20 dist/index.d.ts

      - name: Check packed contents
        run: |
          echo "📦 Package contents (npm pack --dry-run):"
          npm pack --dry-run

      - name: Read package metadata
        id: meta
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Skip if version already on npm
        id: already
        shell: bash
        run: |
          if npm view "${{ steps.meta.outputs.name }}@${{ steps.meta.outputs.version }}" version >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "⚠️  Version ${{ steps.meta.outputs.version }} already exists on npm. Skipping publish."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "✅ Version ${{ steps.meta.outputs.version }} is new. Ready to publish."
          fi

      - name: Publish to npm
        if: steps.already.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing ${{ steps.meta.outputs.name }}@${{ steps.meta.outputs.version }} to npm..."
          npm publish --provenance --access public
          echo "✅ Successfully published to npm!"

      - name: Append install snippet to GitHub Release
        if: github.event_name == 'release' && steps.already.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const release_id = context.payload.release.id;

            const install = `\n\n### 📦 Install\n\`\`\`bash\nnpm install ${pkg.name}@${pkg.version}\n\`\`\`\n`;
            const current = context.payload.release.body || '';
            const body = current.includes('### 📦 Install') ? current : current + install;

            await github.rest.repos.updateRelease({ owner, repo, release_id, body });

      - name: Upload published package
        if: steps.already.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ steps.meta.outputs.version }}
          path: '*.tgz'
          retention-days: 90

      - name: Summary
        if: always()
        run: |
          {
            echo "## 📦 Publish Summary"
            echo ""
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| Package | \`${{ steps.meta.outputs.name }}\` |"
            echo "| Version | \`${{ steps.meta.outputs.version }}\` |"
            echo "| Already on npm | \`${{ steps.already.outputs.exists }}\` |"
            echo "| Published | \`${{ steps.already.outputs.exists == 'false' && 'Yes ✅' || 'No (already exists)' }}\` |"
            echo ""
            echo "### 🔗 Links"
            echo "- [View on npm](https://www.npmjs.com/package/${{ steps.meta.outputs.name }})"
            echo "- [View package files](https://unpkg.com/browse/${{ steps.meta.outputs.name }}@${{ steps.meta.outputs.version }}/)"
            if [ -n "${NOTES:-}" ]; then
              echo ""
              echo "### 📝 Release Notes"
              echo "$NOTES"
            fi
          } >> "$GITHUB_STEP_SUMMARY"